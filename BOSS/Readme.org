* BOSS
** Configuring
*** Dependencies
- Cmake
- Swig 4
- Python3 libs
- NumPy
- Racket BC (CS racket has a different C API). Racket CS and is the default from
  8.0 onward so you need to compile it with the right flags. I used
  [[https://gist.github.com/little-big-h/e024b33174d29f98967a5444124d4eb9][this]]
  file as minimal-racket brew recipe.

*** Wolfram Engine
If you are using the Wolfram engine, you have to:
- install Wolfram Engine;
- authenticate to Wolfram;
- initialise subrepositories:
: git submodule init
: git submodule update
  
*** MacOS
: brew install python3-numpy
: see instructions

From the root project folder (BOSS):
: cmake -DCMAKE_BUILD_TYPE=Debug -BDebug && cd Debug
: OR
: cmake -DCMAKE_BUILD_TYPE=Release -BRelease && cd Release

: cmake -DRacket_ROOT="/Applications/Racket v7.9" .

*** Linux Debian/Ubuntu
: apt install cmake clang-11 clang-tidy-11 clang-format-11 swig4.0 libpython3-dev python3-numpy racket
From the root project folder (BOSS):
: mkdir build && cd build
: cmake -DCMAKE_BUILD_TYPE=Debug ..
: OR
: cmake -DCMAKE_BUILD_TYPE=Release ..
: OR
: cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo ..

*** Windows 10
on Windows 10 you can either use the WSL with the Linux Debian/Ubuntu configurations, or set up a Docker container.

*** Docker container
Pull the proper container from https://github.com/little-big-h/BuildEnvironment
: docker pull ghcr.io/little-big-h/buildenvironment/wolframbased:latest
Run it
: docker run -ti -p 8000:8000  --name mybosscontainer ghcr.io/little-big-h/buildenvironment/wolframbased:latest
Follow configuration/building/running steps for Linux Debian/Ubuntu (packages should all be installed already).

** Building
from your build folder:
: cmake --build .

** Running
*** Python example
from the root project folder (BOSS):
: python3 Tests/TestPython.py

*** Racket server
: raco pkg install --deps search-auto threading
from your build folder:
: racket -tm ../Server/Server.rkt
using any browser, browse to http://localhost:8000

*** Racket repl
see https://asciinema.org/a/LNIfPhRGfQCxpqEtYPcgKBexZ

*** Racket example
#+begin_src racket :exports both :tangle yes :main no :cache no
  #lang racket
  ;; utilities
  (require rackunit)
  (require rackunit/text-ui)
  (require 'BOSS)

  (define-syntax-rule (expect producer expected message)
    (test-equal? message producer expected)
    )


  ;; init db


       (CreateTable Customer FirstName LastName)
       (InsertInto  Customer "Holger" "Pirk")

       (CreateTable Part P_PARTKEY Name)
       (InsertInto  Part 637 "Blobfish")
       (InsertInto  Part 674 "Banana Bread")
       (InsertInto  Part 891 "Horse")
       (InsertInto  Part 9437 "Adventure")

       (CreateTable Lineitem
                    ORDERKEY
                    PARTKEY
                    SUPPKEY
                    LINENUMBER
                    QUANTITY
                    EXTENDEDPRICE
                    DISCOUNT
                    TAX
                    RETURNFLAG
                    LINESTATUS
                    SHIPDATE
                    COMMITDATE
                    RECEIPTDATE
                    SHIPINSTRUCT
                    SHIPMODE
                    COMMENT
                    )
       (InsertInto Lineitem 1 1552 93 1 17 2471035 004 002 "N" "O"
                   (UnixTime "1996-03-13" (Rule TimeZone 1)) (UnixTime "1996-02-12" (Rule TimeZone 1)) (UnixTime "1996-03-22" (Rule TimeZone 1))
                   "DELIVER IN PERSON" "TRUCK"   "egular courts above the")
       (InsertInto Lineitem 1 674  75 2 36 5668812 009 006 "N" "O"
                   (UnixTime "1996-04-12" (Rule TimeZone 1)) (UnixTime "1996-02-28" (Rule TimeZone 1)) (UnixTime "1996-04-20" (Rule TimeZone 1))
                   "TAKE BACK RETURN"  "MAIL"    "ly final dependencies: slyly bold")
       (InsertInto Lineitem 1 637  38 3 8  1230104 010 002 "N" "O"
                   (UnixTime "1996-01-29" (Rule TimeZone 1)) (UnixTime "1996-03-05" (Rule TimeZone 1)) (UnixTime "1996-01-31" (Rule TimeZone 1))
                   "TAKE BACK RETURN"  "REG AIR" "riously. regular, express dep")


  (let
      ([return-code
        (run-tests
         (test-suite
          "All Tests"

          (expect (Group Customer (Function tuple 0) Count) '((1 0)) "Grouping")
          (expect (Plus 1 2 3) 6 "Arithmetic")
          (expect (Greater 1 0) #t "Logic")
          (expect (Group
                   (Select Customer
                           (Function t (Greater 1 0)))
                   (Function 0) Count) '((1 0)) "Select + Aggregate")
          (expect (Group
                   (Select
                    (Select Customer
                            (Function t (Greater 1 0)))
                    (Function t (Greater 1 0)))
                   (Function 0) Count) '((1 0)) "Select + Select + Aggregate")

          (expect (Group
                   (Select
                    (Select Lineitem
                            (Where (Greater QUANTITY 15)))
                    (Where (Greater DISCOUNT 5)))
                   (Function 0)
                   Count
                   ) '((1 0)) "TPC-H Q6 simplified")

          (expect (Group
                   (Select Lineitem
                           (Where
                            (And
                             (Greater DISCOUNT 5)
                             (Greater QUANTITY 15)
                             )
                            ))
                   (Function 0)
                   Count
                   ) '((1 0)) "TPC-H Q6 simplified")

          (expect (Group
                   (Select Lineitem
                           (Where
                            (And
                             (Greater SHIPDATE (UnixTime "1996-03-28" (Rule TimeZone 1)))
                             )
                            ))
                   (Function 0)
                   Count
                   ) '((1 0)) "TPC-H Q6 simplified")

          (expect (Group
                   Lineitem
                   (Sum QUANTITY)
                   ) `((,(+ 17 36 8))) "TPC-H Q6 simplified")

          (expect (Group
                   (Project
                    Lineitem
                    (As revenue (Times EXTENDEDPRICE DISCOUNT)))
                   (Sum revenue)
                   ) '((73204488)) "TPC-H Q6 simplified")

          (expect (Group
                   (Project
                    (Select Lineitem
                            (Where (And (Greater QUANTITY 25)
                                        (Greater DISCOUNT 3)
                                        (Greater 10 DISCOUNT)
                                        (Greater (UnixTime "1998-01-01" (Rule TimeZone 1)) SHIPDATE)
                                        (Greater SHIPDATE (UnixTime "1996-03-08" (Rule TimeZone 1)))
                                        )))
                    (As revenue (Times EXTENDEDPRICE DISCOUNT)))
                   Count
                   ) '((1)) "TPC-H Q6 simplified")

          (expect (Group
                   (Project
                    (Select Lineitem
                            (Where (And (Greater QUANTITY 25)
                                        (Greater DISCOUNT 3)
                                        (Greater 10 DISCOUNT)
                                        (Greater (UnixTime "1998-01-01" (Rule TimeZone 1)) SHIPDATE)
                                        (Greater SHIPDATE (UnixTime "1996-03-08" (Rule TimeZone 1)))
                                        )))
                    (As revenue (Times EXTENDEDPRICE DISCOUNT)))
                   (Sum revenue)
                   ) '((51019308)) "TPC-H Q6")

          (expect (Group
                   (Project
                    (Select Lineitem
                            (Where (And (Greater QUANTITY 25)
                                        (Greater DISCOUNT 3)
                                        (Greater 10 DISCOUNT)
                                        (Greater (UnixTime "1998-01-01" (Rule TimeZone 1)) SHIPDATE)
                                        (Greater SHIPDATE (UnixTime "1996-03-08" (Rule TimeZone 1)))
                                        )))
                    (As revenue (Times EXTENDEDPRICE DISCOUNT)))
                   (Sum revenue)
                   ) '( (51019308)) "TPC-H Q6")


          (expect (Project
                   (Select Lineitem
                           (Where (And (Greater QUANTITY 25)
                                       (Greater DISCOUNT 3)
                                       (Greater 10 DISCOUNT)
                                       (Greater (UnixTime "1998-01-01" (Rule TimeZone 1)) SHIPDATE)
                                       (Greater SHIPDATE (UnixTime "1996-03-08" (Rule TimeZone 1)))
                                       )))
                   (As COMMENT COMMENT))  '(("ly final dependencies: slyly bold")) "projection")


          (expect (Select Lineitem
                          (Where (And (Greater QUANTITY 25)
                                      (Greater DISCOUNT 3)
                                      (Greater 10 DISCOUNT)
                                      (Greater (UnixTime "1998-01-01" (Rule TimeZone 1)) SHIPDATE)
                                      (Greater SHIPDATE (UnixTime "1996-03-08" (Rule TimeZone 1)))
                                      ))
                          ) '((1 674 75 2 36 5668812 9 6 "N" "O" 829263600 825462000 829954800 "TAKE BACK RETURN" "MAIL" "ly final dependencies: slyly bold")) "TPC-H Q6")

          (expect (length
                   (Group Lineitem (By TAX) (Sum QUANTITY) ))
                  2 "Grouping Result Size")

          (expect
           (Group Lineitem (By TAX) (Sum QUANTITY) )
           '((25 2) (36 6)) "Grouping + Sum Results")

          (expect
           (Group Lineitem (By ORDERKEY) Count )
           '((3 1)) "Grouping + Count Results")

          (expect
           (Group Lineitem (By TAX) Count )
           '((2 2) (1 6)) "Grouping + Count Results")

          (expect (Join Lineitem Part (Where (Equal PARTKEY P_PARTKEY)))
                  '((637 "Blobfish" 1 637 38 3 8 1230104 10 2 "N" "O" 822870000 825980400
                         823042800 "TAKE BACK RETURN" "REG AIR" "riously. regular, express dep")
                    (674 "Banana Bread" 1 674 75 2 36 5668812 9 6 "N" "O" 829263600 825462000
                         829954800 "TAKE BACK RETURN" "MAIL" "ly final dependencies: slyly bold")) "Join")



          (expect
           (Group
            (ProjectAll
             Lineitem
             li)
            (Sum li.QUANTITY))
           '((61)) "ProjectAll simplified")

          (expect
           (Group Lineitem (By TAX) (Sum QUANTITY) (Sum EXTENDEDPRICE) )
           '((25 3701139 2) (36 5668812 6)) "Grouping + Sum Results")
          )
         )])
    (collect-garbage)
    return-code)

#+end_src

*** Building a new engine
Here is an example of a fairly simple engine that only interprets a single expression: (Plus v1 v2)
#+NAME: api
#+begin_src C++ :exports code :tangle no :main no :cache no 
  #include <Algorithm.hpp>
  #include <BOSS.hpp>

  using namespace std;
  using namespace boss::algorithm;

  namespace boss::storage::git {
  boss::Expression evaluate(boss::Expression&& e) {
    return visit(
        [](auto&& e) -> boss::Expression {
          if constexpr(isComplexExpression<decltype(e)>) {
            boss::ExpressionArguments args = e.getArguments();
            visitTransform(args, [](auto&& arg) -> boss::Expression {
              if constexpr(isComplexExpression<decltype(arg)>) {
                return evaluate(std::move(arg));
              } else {
                return std::forward<decltype(arg)>(arg);
              }
            });
            if(e.getHead() == Symbol("Plus")) {
              return visitAccumulate(move(args), 0L, [](auto&& state, auto&& arg) {
                if constexpr(is_same_v<decay_t<decltype(arg)>, long long>) {
                  state += arg;
                }
                return state;
              });
            } else {
              return boss::ComplexExpression(e.getHead(), {}, std::move(args), {});
            }
          } else {
            return forward<decltype(e)>(e);
          }
        },
        move(e));
  }
  } // namespace boss::storage::git

  extern "C" BOSSExpression* evaluate(BOSSExpression* e) {
    return new BOSSExpression{.delegate = boss::storage::git::evaluate(::std::move(e->delegate))};
  };
#+end_src

